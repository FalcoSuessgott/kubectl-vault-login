{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kubectl-vault-login","text":"<p>Ever needed short-lived and fine-grained <code>kubectl</code> access to <code>Kubernetes</code>-Cluster for some operations during CI/CD?</p> <p>Well, <code>kubectl-vault-login</code> allows you to do exactly this!</p> <p>By leveraging HashiCorp Vaults Kubernetes Secrets Engine you can create <code>Service Accounts</code> and <code>Service Account tokens</code> with a tight RBAC and a low TTL - making it incredibly useful for CI/CD Operations, such as <code>kubectl apply</code> commands.</p>"},{"location":"#how-does-it-work","title":"How does it work","text":"<p>The HashiCorp Vaults Kubernetes Secrets Engine can operate in 3 modes:</p> <ol> <li>Creating a <code>Service Account Token</code> for an already existing <code>Service Account</code> with a pre-existing <code>Role</code> &amp; <code>Rolebinding</code></li> <li>Creating a <code>Service Account</code> and a <code>Service Account Token</code> with a pre-existing <code>Role</code> &amp; <code>Rolebinding</code></li> <li>Creating a <code>Service Account</code>, a <code>Service Account Token</code> and the <code>Rolebinding</code> for an pre-existing <code>Role</code></li> </ol> <p>Every resource created by <code>Vault</code> will automatically revoked after the lease is expired.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>For every mode, the steps are the same:</p> <ol> <li>Install the plugin</li> <li>Configure Kubernetes to allow <code>Vault</code> creating the resources</li> <li>Configure HashiCorp Vaults Kubernetes Secrets Engine</li> <li>Patch your <code>kubeconfig</code> to use an <code>ExeConfig</code>:</li> </ol> <pre><code># $KUBECONFIG\n[...]\nusers:\n- name: kind-kind\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: kubectl-vault-login\n      args:\n        - --role=kind\n</code></pre> <ol> <li>Run any <code>kubectl</code> plugin that is allowed in your RBAC-setup</li> </ol> <p>Checkout the Guides</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#manual","title":"Manual","text":"<p>Download the artifacts from the Release section</p>"},{"location":"installation/#krew","title":"<code>krew</code>","text":"<p>tbd.</p>"},{"location":"installation/#brew","title":"<code>brew</code>","text":"<pre><code>brew install falcosuessgott/tap/kubectl-vault-login`\n</code></pre>"},{"location":"installation/#curl","title":"<code>curl</code>","text":"<pre><code>version=$(curl https://api.github.com/repos/falcosuessgott/kubectl-vault-login/releases/latest -s | jq .name -r)\ncurl -OL \"https://github.com/FalcoSuessgott/kubectl-vault-login/releases/download/${version}/vkv_$(uname)_$(uname -m).tar.gz\"\ntar xzf kubectl-vault-login_$(uname)_$(uname -m).tar.gz\nchmod u+x kubectl-vault-login\n./kubectl-vault-login version\n</code></pre>"},{"location":"installation/#go","title":"<code>go</code>","text":"<pre><code>git clone https://github.com/FalcoSuessgott/kubectl-vault-login.git\ncd kubectl-vault-login\ngo build\n</code></pre>"},{"location":"mode-01/","title":"Creating a <code>Service Account Token</code> for an already existing <code>Service Account</code> with a pre-existing <code>Role</code> &amp; <code>Rolebinding</code>","text":"<p>This guide will walk you through setting up <code>Kubernetes</code> and <code>Vault</code> and its <code>Kubernetes Secret Engine</code> to create a <code>Service Account Token</code> for an already existing <code>Service Account</code> with a pre-existing <code>Role</code> &amp; <code>Rolebinding</code></p>"},{"location":"mode-01/#prerequisites","title":"Prerequisites","text":"<p>You will need the following tools to be installed:</p> <ul> <li><code>kind</code></li> <li><code>Vault</code></li> <li><code>kubectl-vault-login</code></li> </ul>"},{"location":"mode-01/#setup-kind","title":"Setup <code>kind</code>","text":"<pre><code>kind create cluster --config=kind-config.yml\n</code></pre> <p>you should now be able to run `kubectl commands:</p> <pre><code>kubectl get ns\nNAME                 STATUS   AGE\ndefault              Active   64m\nkube-node-lease      Active   64m\nkube-public          Active   64m\nkube-system          Active   64m\nlocal-path-storage   Active   63m\n</code></pre>"},{"location":"mode-01/#configure-vault-access","title":"Configure <code>Vault</code> access","text":"<p>The following manifest, creates a <code>Service Account</code> <code>vault-auth</code> and binds the role <code>service-account-token-creator</code> to it, which allows to create <code>Service Account Tokens</code>. This <code>Service Account</code> is being used by <code>Vault</code> to create <code>Service Account Tokens</code> for the <code>tmp-sa</code> <code>Service Account</code> that we will create in the next section:</p> <pre><code>cat &lt;&lt;EOF | kubectl create -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: vault-auth\nautomountServiceAccountToken: true\n---\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: vault-auth-token\n  annotations:\n    kubernetes.io/service-account.name: vault-auth\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: service-account-token-creator\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"serviceaccounts/token\"]\n    verbs: [\"create\", \"update\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: service-account-token-creator-binding\nsubjects:\n  - kind: ServiceAccount\n    name: vault-auth\nroleRef:\n  kind: Role\n  name: service-account-token-creator\n  apiGroup: rbac.authorization.k8s.io\nEOF\n</code></pre>"},{"location":"mode-01/#create-a-service-account-for-which-vault-creates-the-service-account-token","title":"Create a <code>Service Account</code> for which <code>Vault</code> creates the <code>Service Account Token</code>","text":"<p>This manifest creates a <code>Service Account</code> <code>tmp-sa</code> that is bound to the <code>role-list-pods</code> role that only allows to list pods in the <code>default</code> namespace:</p> <pre><code>cat &lt;&lt;EOF | kubectl create -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tmp-sa\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: role-list-pods\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: role-abilities\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: role-list-pods\nsubjects:\n- kind: ServiceAccount\n  name: tmp-sa\nEOF\n</code></pre>"},{"location":"mode-01/#configure-vault","title":"Configure <code>Vault</code>","text":"<p>Lastly, we will need to start and configure a local <code>Vault Server</code>:</p> <pre><code>vault server \\\n        -dev \\\n        -dev-listen-address=0.0.0.0:8200 \\\n        -dev-root-token-id=root &amp;\n</code></pre> <p>Now, we will configure the <code>Kubernetes Secrets Engine</code> to connect to the local <code>kind</code> Cluster with the <code>vault-auth</code> <code>Service Account</code> and creating a role <code>kind</code> that will create a <code>Service Account Token</code> for the <code>tmp-sa</code> Service Account:</p> <pre><code>export VAULT_ADDR=\"http://127.0.0.1:8200\"\nexport VAULT_TOKEN=\"root\"\nexport VAULT_TLS_SKIP_VERIFY=\"true\"\n</code></pre> <pre><code>#!/usr/bin/env bash\nset -ex\n\nK8S_JWT_TOKEN=$(kubectl get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d)\nK8S_CA_CERT=$(kubectl get secret vault-auth-token -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 -d)\n\nvault secrets enable kubernetes\nvault write -f kubernetes/config \\\n    kubernetes_host=\"https://127.0.0.1:6443\" \\\n    kubernetes_ca_cert=\"$K8S_CA_CERT\" \\\n    service_account_jwt=\"$K8S_JWT_TOKEN\"\n\nvault write kubernetes/roles/kind \\\n    allowed_kubernetes_namespaces=\"default\" \\\n    service_account_name=\"tmp-sa\" \\\n    token_default_ttl=\"10m\"\n</code></pre>"},{"location":"mode-01/#putting-it-together","title":"Putting it together","text":"<p>Write <code>kind</code>s <code>kubeconfig</code> to a file:</p> <pre><code>kind get kubeconfig &gt; kind-kubeconfig.yml\n</code></pre> <p>and update it, to use <code>kubectl-vault-login</code> for obtaining access:</p> <pre><code># kind-kubeconfig.yml\n[...]\nusers:\n- name: kind-kind\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: kubectl-vault-login\n      args:\n        - --role=kind\n</code></pre> <p>You will still need to be authenticated to <code>Vault</code>:</p> <pre><code>export VAULT_ADDR=\"http://127.0.0.1:8200\"\nexport VAULT_TOKEN=\"root\"\nexport VAULT_TLS_SKIP_VERIFY=\"true\"\n</code></pre> <pre><code># create a pod to see some results\nkubectl run nginx --image=nginx\n# use the updated kubeconfig to list pods in the default namespace\nKUBECONFIG=kubeconfig.yml kubectl get pods\n</code></pre> <p>And you should see: <pre><code>NAME    READY   STATUS    RESTARTS   AGE\nnginx   1/1     Running   0          73s\n</code></pre></p> <p>The role <code>role-list-pods</code> allows listing pods for the <code>default</code> namespace, but not for <code>kube-system</code>:</p> <pre><code>KUBECONFIG=vault-kubeconfig.yml k get pod -n kube-config\nError from server (Forbidden): pods is forbidden: User \"system:serviceaccount:default:v-token-kind-1739680669-u5x0uqreffqt8hf2qdydpksf\" cannot list resource \"pods\" in API group \"\" in the namespace \"kube-system\"\n</code></pre>"},{"location":"mode-01/#teardown","title":"Teardown","text":"<p>Tear everything down by running: <pre><code>kind delete cluster\nkill -9 $(pgrep -x vault)\n</code></pre></p>"},{"location":"mode-02/","title":"Creating a <code>Service Account</code> and a <code>Service Account Token</code> with a pre-existing <code>Role</code> &amp; <code>Rolebinding</code>","text":"<p>This guide will walk you through setting up <code>Kubernetes</code> and <code>Vault</code> and its <code>Kubernetes Secret Engine</code> to create a <code>Service Account</code> and a  <code>Service Account Token</code> with a pre-existing <code>Role</code> &amp; <code>Rolebinding</code></p>"},{"location":"mode-02/#prerequisites","title":"Prerequisites","text":"<p>You will need the following tools to be installed:</p> <ul> <li><code>kind</code></li> <li><code>Vault</code></li> <li><code>kubectl-vault-login</code></li> </ul>"},{"location":"mode-02/#setup-kind","title":"Setup <code>kind</code>","text":"<pre><code>kind create cluster --config=kind-config.yml\n</code></pre> <p>you should now be able to run `kubectl commands:</p> <pre><code>kubectl get ns\nNAME                 STATUS   AGE\ndefault              Active   64m\nkube-node-lease      Active   64m\nkube-public          Active   64m\nkube-system          Active   64m\nlocal-path-storage   Active   63m\n</code></pre>"},{"location":"mode-02/#configure-vault-access","title":"Configure <code>Vault</code> access","text":"<p>The following manifest, creates a <code>Service Account</code> <code>vault-auth</code> and binds the role <code>service-account-creator</code> to it, which allows to create <code>Service Accounts</code> and <code>Service Account Tokens</code>. This <code>Service Account</code> is being used by <code>Vault</code>:</p> <p>Note</p> <pre><code>cat &lt;&lt;EOF | kubectl create -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: vault-auth\nautomountServiceAccountToken: true\n---\napiVersion: v1\nkind: Secret\ntype: kubernetes.io/service-account-token\nmetadata:\n  name: vault-auth-token\n  annotations:\n    kubernetes.io/service-account.name: vault-auth\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: service-account-creator\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"serviceaccounts\"]\n    verbs: [\"create\",\"update\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"serviceaccounts/token\"]\n    verbs: [\"create\", \"update\", \"delete\"]\n  - apiGroups: [\"rbac.authorization.k8s.io\"]\n    resources: [\"rolebindings\"]\n    verbs: [\"create\", \"get\", \"list\", \"watch\", \"update\", \"patch\", \"delete\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: service-account-creator-binding\nsubjects:\n  - kind: ServiceAccount\n    name: vault-auth\nroleRef:\n  kind: Role\n  name: service-account-creator\n  apiGroup: rbac.authorization.k8s.io\nEOF\n</code></pre>"},{"location":"mode-02/#kubernetes-prevents-users-including-service-accounts-from-granting-rbac-permissions-they-do-not-already-have-themselves","title":"Kubernetes prevents users (including service accounts) from granting RBAC permissions they do not already have themselves","text":""},{"location":"mode-02/#configure-vault","title":"Configure <code>Vault</code>","text":"<p>Lastly, we will need to start and configure a local <code>Vault Server</code>:</p> <pre><code>vault server \\\n        -dev \\\n        -dev-listen-address=0.0.0.0:8200 \\\n        -dev-root-token-id=root &amp;\n</code></pre> <p>Now, we will configure the <code>Kubernetes Secrets Engine</code> to connect to the local <code>kind</code> Cluster with the <code>vault-auth</code> <code>Service Account</code> and creating a role <code>kind</code> that will create a <code>Service Account Token</code> for the <code>tmp-sa</code> Service Account:</p> <pre><code>export VAULT_ADDR=\"http://127.0.0.1:8200\"\nexport VAULT_TOKEN=\"root\"\nexport VAULT_TLS_SKIP_VERIFY=\"true\"\n</code></pre> <pre><code>#!/usr/bin/env bash\n\nset -ex\n\nK8S_JWT_TOKEN=$(kubectl get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d)\nK8S_CA_CERT=$(kubectl get secret vault-auth-token -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 -d)\n\nvault secrets enable kubernetes\nvault write -f kubernetes/config \\\n    kubernetes_host=\"https://127.0.0.1:6443\" \\\n    kubernetes_ca_cert=\"$K8S_CA_CERT\" \\\n    service_account_jwt=\"$K8S_JWT_TOKEN\"\n\nvault write kubernetes/roles/kind \\\n    allowed_kubernetes_namespaces=\"default\" \\\n    kubernetes_role_name=\"role-list-pods\" \\\n    token_default_ttl=\"10m\"\n</code></pre>"},{"location":"mode-02/#putting-it-together","title":"Putting it together","text":"<p>Write <code>kind</code>s <code>kubeconfig</code> to a file:</p> <pre><code>kind get kubeconfig &gt; kind-kubeconfig.yml\n</code></pre> <p>and update it, to use <code>kubectl-vault-login</code> for obtaining access:</p> <pre><code># kind-kubeconfig.yml\n[...]\nusers:\n- name: kind-kind\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: kubectl-vault-login\n      args:\n        - --role=kind\n</code></pre> <p>You will still need to be authenticated to <code>Vault</code>:</p> <pre><code>export VAULT_ADDR=\"http://127.0.0.1:8200\"\nexport VAULT_TOKEN=\"root\"\nexport VAULT_TLS_SKIP_VERIFY=\"true\"\n</code></pre> <pre><code># create a pod to see some results\nkubectl run nginx --image=nginx\n# use the updated kubeconfig to list pods in the default namespace\nKUBECONFIG=kubeconfig.yml kubectl get pods\n</code></pre> <p>And you should see: <pre><code>NAME    READY   STATUS    RESTARTS   AGE\nnginx   1/1     Running   0          73s\n</code></pre></p> <p>The role <code>role-list-pods</code> allows listing pods for the <code>default</code> namespace, but not for <code>kube-system</code>:</p> <pre><code>KUBECONFIG=vault-kubeconfig.yml k get pod -n kube-config\nError from server (Forbidden): pods is forbidden: User \"system:serviceaccount:default:v-token-kind-1739680669-u5x0uqreffqt8hf2qdydpksf\" cannot list resource \"pods\" in API group \"\" in the namespace \"kube-system\"\n</code></pre>"},{"location":"mode-02/#teardown","title":"Teardown","text":"<p>Tear everything down by running: <pre><code>kind delete cluster\nkill -9 $(pgrep -x vault)\n</code></pre></p>"},{"location":"mode-03/","title":"Creating a <code>Service Account</code>, a <code>Service Account Token</code> and the <code>Rolebinding</code> for an pre-existing <code>Role</code>","text":""},{"location":"mode-03/#kind","title":"kind","text":"<pre><code>kind create cluster --config=kind-config.yml\n</code></pre>"},{"location":"mode-03/#sa-token-vault-auth-token-ued-by-vault-that-is-allowed-to-create-service-account-tokens","title":"SA token (vault-auth) + token ued by vault that is allowed to create service account tokens","text":"<pre><code>kubectl apply -f vault-auth.yml\n</code></pre>"},{"location":"mode-03/#vault","title":"Vault","text":"<pre><code>vault server \\\n    -dev \\\n    -dev-listen-address=0.0.0.0:8200 \\\n    -dev-root-token-id=root\n</code></pre> <p>Kubernetes prevents users (including service accounts) from granting RBAC permissions they do not already have themselves The \"escalate\" verb allows a user to grant roles with more privileges than they themselves have. The \"bind\" verb allows a user (or service account) to assign an existing Role or ClusterRole to subjects (users, groups, or service accounts) by creating RoleBindings or ClusterRoleBindings.</p>"},{"location":"mode-03/#configure-vault","title":"Configure vault","text":"<pre><code>K8S_JWT_TOKEN=$(kubectl get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d)\nK8S_CA_CERT=$(kubectl get secret vault-auth-token -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 -d)\nvault secrets enable kubernetes\nvault write -f kubernetes/config \\\n    kubernetes_host=\"https://127.0.0.1:6443\" \\\n    kubernetes_ca_cert=\"$K8S_CA_CERT\" \\\n    service_account_jwt=\"$K8S_JWT_TOKEN\"\nvault write kubernetes/roles/test \\\n    allowed_kubernetes_namespaces=\"default\" \\\n    generated_role_rules=\"$(jq -c . tmp.json)\" \\\n    token_default_ttl=\"10m\"\n\nvault write \\\n    kubernetes/creds/test \\\n    ttl=20m\n</code></pre> <pre><code>#generated_role_rules=\"rules:\\n- apiGroups: [\\\"\\\"]\\n  resources: [\\\"pods\\\"]\\n  verbs: [\\\"list\\\"]\" \\\n</code></pre>"},{"location":"mode-03/#create-a-pod-to-show-we-can-list-pods","title":"create a pod to show we can list pods","text":"<p><code>bash kubectl run nginx --image=nginx</code></p>"},{"location":"mode-03/#fetch-credentials","title":"fetch credentials","text":"<pre><code>token=$(vault write -field=service_account_token \\\n    kubernetes/creds/test \\\n    kubernetes_namespace=default \\\n    ttl=20m)\ncurl -H \"Authorization: Bearer $token\" -sk $(kubectl config view --minify -o 'jsonpath={.clusters[].cluster.server}')/api/v1/namespaces/default/pods | jq .\n</code></pre>"},{"location":"mode-03/#example-kubeconfig","title":"example kubeconfig","text":"<pre><code>kind get kubeconfig &gt; vault-kubeconfig.yml\n</code></pre> <pre><code># vault-kubeconfig.yml\n[...]\nusers:\n- name: kind-kind\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: ./exec.sh\n      env:\n        - name: VAULT_ROLE\n          value: test\n        - name: K8S_NAMESPACE\n          value: default\n        - name: TTL\n          value: 20m\n</code></pre>"},{"location":"mode-03/#example-exec-script","title":"Example exec script:","text":"<pre><code>#!/usr/bin/env bash\ncat &lt;&lt;EOF\n{\n  \"apiVersion\": \"client.authentication.k8s.io/v1beta1\",\n  \"kind\": \"ExecCredential\",\n  \"status\": {\n    \"token\": \"$(vault write -format=json -field=service_account_token kubernetes/creds/\"${VAULT_ROLE}\" kubernetes_namespace=\"${K8S_NAMESPACE}\" ttl=\"${TTL}\" | jq -r .)\"\n  }\n}\nEOF\n</code></pre> <p>SA works for namespace default: <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po\nNAME    READY   STATUS    RESTARTS   AGE\nnginx   1/1     Running   0          15m\n</code></pre></p> <p>but not for kube-system:</p> <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po -n kube-config\nError from server (Forbidden): pods is forbidden: User \"system:serviceaccount:default:tmp-sa\" cannot list resource \"pods\" in API group \"\" in the namespace \"kube-config\"\n</code></pre>"},{"location":"mode-03/#teardown","title":"teardown","text":"<pre><code>kind delete cluster\nkill -9 $(pgrep -x vault)\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Tip</p> <p>All of Vaults Environment Variables are supported.</p> <pre><code>&gt; kubectl-vault-login -h\nA kubectl plugin to to obtain access to a kubernetes cluster via HashiCorp Vaults Kubernetes secrets engine\n\nUsage:\n  kubectl-vault-login [flags]\n\nFlags:\n  -a, --audiences string   A comma separated string containing the intended audiences of the generated Kubernetes service account (VAULT_K8S_LOGIN_AUDIENCES)\n  -c, --crb                If true, generate a ClusterRoleBinding to grant permissions across the whole cluster instead of within a namespace (VAULT_K8S_LOGIN_CRB)\n  -h, --help               help for kubectl-vault-login\n  -m, --mount string       The Kubernetes secrets mount path (VAULT_K8S_LOGIN_MOUNT) (default \"kubernetes\")\n  -n, --ns string          The name of the Kubernetes namespace in which to generate the credentials (VAULT_K8S_LOGIN_NAMESPACE)\n  -r, --role string        The name of the role to generate credentials for (VAULT_K8S_LOGIN_ROLE)\n  -t, --ttl string         The ttl of the generated Kubernetes service account (VAULT_K8S_LOGIN_TTL) (default \"1h\")\n</code></pre>"},{"location":"guide/01-create-sa-token/","title":"01: Generate a service account token for a pre-existing service account","text":""},{"location":"guide/01-create-sa-token/#kind","title":"kind","text":"<pre><code>kind create cluster --config=kind-config.yml\n</code></pre>"},{"location":"guide/01-create-sa-token/#sa-token-vault-auth-token-ued-by-vault-that-is-allowed-to-create-service-account-tokens","title":"SA token (vault-auth) + token ued by vault that is allowed to create service account tokens","text":"<pre><code>kubectl apply -f vault-auth.yml\n</code></pre>"},{"location":"guide/01-create-sa-token/#vault","title":"Vault","text":"<pre><code>vault server \\\n    -dev \\\n    -dev-listen-address=0.0.0.0:8200 \\\n    -dev-root-token-id=root\n</code></pre>"},{"location":"guide/01-create-sa-token/#configure-vault","title":"Configure vault","text":"<pre><code>K8S_JWT_TOKEN=$(kubectl get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d)\nK8S_CA_CERT=$(kubectl get secret vault-auth-token -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 -d)\nvault secrets enable kubernetes\nvault write -f kubernetes/config \\\n    kubernetes_host=\"https://127.0.0.1:6443\" \\\n    kubernetes_ca_cert=\"$K8S_CA_CERT\" \\\n    service_account_jwt=\"$K8S_JWT_TOKEN\"\nvault write kubernetes/roles/test \\\n    allowed_kubernetes_namespaces=\"default\" \\\n    service_account_name=\"tmp-sa\" \\\n    token_default_ttl=\"10m\"\n</code></pre>"},{"location":"guide/01-create-sa-token/#create-a-pod-to-show-we-can-list-pods","title":"create a pod to show we can list pods","text":"<pre><code>kubectl run nginx --image=nginx\n</code></pre>"},{"location":"guide/01-create-sa-token/#fetch-credentials","title":"fetch credentials","text":"<pre><code>kubectl apply -f tmp-sa.yml\ntoken=$(vault write -field=service_account_token \\\n    kubernetes/creds/test \\\n    ttl=20m)\ncurl -H \"Authorization: Bearer $token\" -sk $(kubectl config view --minify -o 'jsonpath={.clusters[].cluster.server}')/api/v1/namespaces/default/pods | jq .\n</code></pre>"},{"location":"guide/01-create-sa-token/#example-kubeconfig","title":"example kubeconfig","text":"<pre><code>kind get kubeconfig &gt; vault-kubeconfig.yml\n</code></pre> <pre><code># vault-kubeconfig.yml\n[...]\nusers:\n- name: kind-kind\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: ./exec.sh\n      env:\n        - name: VAULT_ROLE\n          value: test\n        - name: TTL\n          value: 20m\n</code></pre>"},{"location":"guide/01-create-sa-token/#example-exec-script","title":"Example exec script:","text":"<pre><code>#!/usr/bin/env bash\ncat &lt;&lt;EOF\n{\n  \"apiVersion\": \"client.authentication.k8s.io/v1beta1\",\n  \"kind\": \"ExecCredential\",\n  \"status\": {\n    \"token\": \"$(vault write -format=json -field=service_account_token kubernetes/creds/\"${VAULT_ROLE}\" ttl=\"${TTL}\" | jq -r .)\"\n  }\n}\nEOF\n</code></pre> <p>SA works for namespace default: <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po\nNAME    READY   STATUS    RESTARTS   AGE\nnginx   1/1     Running   0          15m\n</code></pre></p> <p>but not for kube-system:</p> <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po -n kube-config\nError from server (Forbidden): pods is forbidden: User \"system:serviceaccount:default:tmp-sa\" cannot list resource \"pods\" in API group \"\" in the namespace \"kube-config\"\n</code></pre>"},{"location":"guide/01-create-sa-token/#teardown","title":"teardown","text":"<pre><code>kind delete cluster\nkill -9 $(pgrep -x vault)\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/","title":"02: Generate a Kubernetes role, role binding, service account and token","text":""},{"location":"guide/02-create-sa-sa-token-role-binding/#kind","title":"kind","text":"<pre><code>kind create cluster --config=kind-config.yml\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/#sa-token-vault-auth-token-ued-by-vault-that-is-allowed-to-create-service-account-tokens","title":"SA token (vault-auth) + token ued by vault that is allowed to create service account tokens","text":"<pre><code>kubectl apply -f vault-auth.yml\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/#vault","title":"Vault","text":"<pre><code>vault server \\\n    -dev \\\n    -dev-listen-address=0.0.0.0:8200 \\\n    -dev-root-token-id=root\n</code></pre> <p>Kubernetes prevents users (including service accounts) from granting RBAC permissions they do not already have themselves</p>"},{"location":"guide/02-create-sa-sa-token-role-binding/#configure-vault","title":"Configure vault","text":"<pre><code>K8S_JWT_TOKEN=$(kubectl get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d)\nK8S_CA_CERT=$(kubectl get secret vault-auth-token -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 -d)\nvault secrets enable kubernetes\nvault write -f kubernetes/config \\\n    kubernetes_host=\"https://127.0.0.1:6443\" \\\n    kubernetes_ca_cert=\"$K8S_CA_CERT\" \\\n    service_account_jwt=\"$K8S_JWT_TOKEN\"\nvault write kubernetes/roles/test \\\n    allowed_kubernetes_namespaces=\"default\" \\\n    kubernetes_role_name=\"role-list-pods\" \\\n    token_default_ttl=\"10m\"\n\nvault write \\\n    kubernetes/creds/test \\\n    ttl=20m\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/#create-a-pod-to-show-we-can-list-pods","title":"create a pod to show we can list pods","text":"<pre><code>kubectl run nginx --image=nginx\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/#fetch-credentials","title":"fetch credentials","text":"<pre><code>kubectl apply -f tmp-sa.yml\ntoken=$(vault write -field=service_account_token \\\n    kubernetes/creds/test \\\n    kubernetes_namespace=default \\\n    ttl=20m)\ncurl -H \"Authorization: Bearer $token\" -sk $(kubectl config view --minify -o 'jsonpath={.clusters[].cluster.server}')/api/v1/namespaces/default/pods | jq .\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/#example-kubeconfig","title":"example kubeconfig","text":"<pre><code>kind get kubeconfig &gt; vault-kubeconfig.yml\n</code></pre> <pre><code># vault-kubeconfig.yml\n[...]\nusers:\n- name: kind-kind\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: ./exec.sh\n      env:\n        - name: VAULT_ROLE\n          value: test\n        - name: K8S_NAMESPACE\n          value: default\n        - name: TTL\n          value: 20m\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/#example-exec-script","title":"Example exec script:","text":"<pre><code>#!/usr/bin/env bash\ncat &lt;&lt;EOF\n{\n  \"apiVersion\": \"client.authentication.k8s.io/v1beta1\",\n  \"kind\": \"ExecCredential\",\n  \"status\": {\n    \"token\": \"$(vault write -format=json -field=service_account_token kubernetes/creds/\"${VAULT_ROLE}\" kubernetes_namespace=\"${K8S_NAMESPACE}\" ttl=\"${TTL}\" | jq -r .)\"\n  }\n}\nEOF\n</code></pre> <p>SA works for namespace default: <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po\nNAME    READY   STATUS    RESTARTS   AGE\nnginx   1/1     Running   0          15m\n</code></pre></p> <p>but not for kube-system:</p> <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po -n kube-config\nError from server (Forbidden): pods is forbidden: User \"system:serviceaccount:default:tmp-sa\" cannot list resource \"pods\" in API group \"\" in the namespace \"kube-config\"\n</code></pre>"},{"location":"guide/02-create-sa-sa-token-role-binding/#teardown","title":"teardown","text":"<pre><code>kind delete cluster\nkill -9 $(pgrep -x vault)\n</code></pre>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/","title":"01: Generate a service account and a token, and bind a pre-existing Kubernetes role","text":""},{"location":"guide/03-create-sa-sa-token-role-role-binding/#kind","title":"kind","text":"<pre><code>kind create cluster --config=kind-config.yml\n</code></pre>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#sa-token-vault-auth-token-ued-by-vault-that-is-allowed-to-create-service-account-tokens","title":"SA token (vault-auth) + token ued by vault that is allowed to create service account tokens","text":"<pre><code>kubectl apply -f vault-auth.yml\n</code></pre>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#vault","title":"Vault","text":"<pre><code>vault server \\\n    -dev \\\n    -dev-listen-address=0.0.0.0:8200 \\\n    -dev-root-token-id=root\n</code></pre> <p>Kubernetes prevents users (including service accounts) from granting RBAC permissions they do not already have themselves The \"escalate\" verb allows a user to grant roles with more privileges than they themselves have. The \"bind\" verb allows a user (or service account) to assign an existing Role or ClusterRole to subjects (users, groups, or service accounts) by creating RoleBindings or ClusterRoleBindings.</p>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#configure-vault","title":"Configure vault","text":"<pre><code>K8S_JWT_TOKEN=$(kubectl get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d)\nK8S_CA_CERT=$(kubectl get secret vault-auth-token -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 -d)\nvault secrets enable kubernetes\nvault write -f kubernetes/config \\\n    kubernetes_host=\"https://127.0.0.1:6443\" \\\n    kubernetes_ca_cert=\"$K8S_CA_CERT\" \\\n    service_account_jwt=\"$K8S_JWT_TOKEN\"\nvault write kubernetes/roles/test \\\n    allowed_kubernetes_namespaces=\"default\" \\\n    generated_role_rules=\"$(jq -c . tmp.json)\" \\\n    token_default_ttl=\"10m\"\n\nvault write \\\n    kubernetes/creds/test \\\n    ttl=20m\n</code></pre> <pre><code>#generated_role_rules=\"rules:\\n- apiGroups: [\\\"\\\"]\\n  resources: [\\\"pods\\\"]\\n  verbs: [\\\"list\\\"]\" \\\n</code></pre>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#create-a-pod-to-show-we-can-list-pods","title":"create a pod to show we can list pods","text":"<p><code>bash kubectl run nginx --image=nginx</code></p>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#fetch-credentials","title":"fetch credentials","text":"<pre><code>token=$(vault write -field=service_account_token \\\n    kubernetes/creds/test \\\n    kubernetes_namespace=default \\\n    ttl=20m)\ncurl -H \"Authorization: Bearer $token\" -sk $(kubectl config view --minify -o 'jsonpath={.clusters[].cluster.server}')/api/v1/namespaces/default/pods | jq .\n</code></pre>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#example-kubeconfig","title":"example kubeconfig","text":"<pre><code>kind get kubeconfig &gt; vault-kubeconfig.yml\n</code></pre> <pre><code># vault-kubeconfig.yml\n[...]\nusers:\n- name: kind-kind\n  user:\n    exec:\n      apiVersion: client.authentication.k8s.io/v1beta1\n      command: ./exec.sh\n      env:\n        - name: VAULT_ROLE\n          value: test\n        - name: K8S_NAMESPACE\n          value: default\n        - name: TTL\n          value: 20m\n</code></pre>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#example-exec-script","title":"Example exec script:","text":"<pre><code>#!/usr/bin/env bash\ncat &lt;&lt;EOF\n{\n  \"apiVersion\": \"client.authentication.k8s.io/v1beta1\",\n  \"kind\": \"ExecCredential\",\n  \"status\": {\n    \"token\": \"$(vault write -format=json -field=service_account_token kubernetes/creds/\"${VAULT_ROLE}\" kubernetes_namespace=\"${K8S_NAMESPACE}\" ttl=\"${TTL}\" | jq -r .)\"\n  }\n}\nEOF\n</code></pre> <p>SA works for namespace default: <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po\nNAME    READY   STATUS    RESTARTS   AGE\nnginx   1/1     Running   0          15m\n</code></pre></p> <p>but not for kube-system:</p> <pre><code>KUBECONFIG=vault-kubeconfig.yml k get po -n kube-config\nError from server (Forbidden): pods is forbidden: User \"system:serviceaccount:default:tmp-sa\" cannot list resource \"pods\" in API group \"\" in the namespace \"kube-config\"\n</code></pre>"},{"location":"guide/03-create-sa-sa-token-role-role-binding/#teardown","title":"teardown","text":"<pre><code>kind delete cluster\nkill -9 $(pgrep -x vault)\n</code></pre>"}]}